name: Build, Test, Code Scan, and Auto Tag C# Project
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write  # Add global permissions

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test --no-build --configuration Release

      # Store the build outputs as artifacts for the next job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            **/*.dll
            **/*.pdb

  sonarcloud-analysis:
    runs-on: ubuntu-latest  # Use Linux runner for SonarCloud
    needs: build-and-test  # Ensure this job waits for the build-and-test job to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      # Run SonarCloud scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ArticHand_CertiForce
            -Dsonar.organization=artichand
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Ensure write access to contents
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Git for tag push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Bump Version and Create Tag
        id: tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")

          IFS='.' read -r -a parts <<< "${latest_tag//v/}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}

          patch=$((patch + 1))

          new_tag="v$major.$minor.$patch"
          echo "New tag will be: $new_tag"

          git tag $new_tag
          git push origin $new_tag
